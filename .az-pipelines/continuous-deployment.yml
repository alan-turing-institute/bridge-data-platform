# Pipeline is triggered on pushes to master
# and does NOT run in Pull Requests
trigger:
  - master
pr: none

# Schedule a Ubuntu VM to run the job (18.04 includes kubectl and helm)
pool:
  vmImage: ubuntu-18.04

# List of environment variables to be used throughout the pipeline.
# Mostly consists of software versions and namespaces.
#
# Versions 'jupyterhub_chart_version' can be found at the following URL:
#     https://jupyterhub.github.io/helm-chart/
#
#     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/tags
variables:
  SERVICE_CONNECTION: "bridge-data-platform-scn"
  KEY_VAULT_NAME: "bridge-data-keyvault"
  JUPYTERHUB_CHART_VERSION: "0.9.1"
  KUBERNETES_CLUSTER_NAME: "bridge-data-cluster"
  KUBERNETES_CLUSTER_RESOURCE_GROUP: "bridge-data-platform"
  KUBERNETES_NAMESPACE: "bridgehub"

# Construct the job to deploy the upgrade
steps:
  - task: AzureKeyVault@1
    displayName: "Pull Secrets from Key Vault"
    inputs:
      azureSubscription: $(SERVICE_CONNECTION)
      KeyVaultName: $(KEY_VAULT_NAME)
      SecretsFilter: "proxySecretToken, githubClientId, githubClientSecret, \
        letsEncryptContactEmail, azureADClientId, azureADClientSecret, \
        azureADTenantId"

  - bash: |
      mkdir -p .secret
      sed -e "s/<proxySecretToken>/$(proxySecretToken)/" \
      -e "s/<githubClientId>/$(githubClientId)/" \
      -e "s/<githubClientSecret>/$(githubClientSecret)/" \
      -e "s/<letsEncryptContactEmail>/$(letsEncryptContactEmail)/" \
      -e "s/<azureADClientId>/$(azureADClientId)/" \
      -e "s/<azureADClientSecret>/$(azureADClientSecret)/" \
      -e "s/<azureADTenantId>/$(azureADTenantId)/" \
      config/config-template.yaml > .secret/config.yaml
    displayName: "Generate .secret/config.yaml"

  - bash: |
      helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
      helm repo update
    displayName: "Add JupyterHub helm chart repository"

  - task: HelmDeploy@0
    # yamllint disable-line rule:line-length
    displayName: "Install JupyterHub helm chart version $(JUPYTERHUB_CHART_VERSION) to release/namespace $(KUBERNETES_NAMESPACE)"
    inputs:
      azureSubscriptionEndPoint: $(SERVICE_CONNECTION)
      azureResourceGroup: $(KUBERNETES_CLUSTER_RESOURCE_GROUP)
      kubernetesCluster: $(KUBERNETES_CLUSTER_NAME)
      namespace: $(KUBERNETES_NAMESPACE)
      command: "upgrade"
      chartName: "jupyterhub/jupyterhub"
      releaseName: $(KUBERNETES_NAMESPACE)
      valueFile: ".secret/config.yaml"
      install: true
      # yamllint disable-line rule:line-length
      arguments: "--version $(JUPYTERHUB_CHART_VERSION) --create-namespace --cleanup-on-fail"
